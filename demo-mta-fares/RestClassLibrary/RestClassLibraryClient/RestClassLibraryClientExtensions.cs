// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClassLibrary
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for RestClassLibraryClient.
    /// </summary>
    public static partial class RestClassLibraryClientExtensions
    {
            /// <summary>
            /// taxi zones list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetTaxiZones(this IRestClassLibraryClient operations)
            {
                return Task.Factory.StartNew(s => ((IRestClassLibraryClient)s).GetTaxiZonesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// taxi zones list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTaxiZonesAsync(this IRestClassLibraryClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaxiZonesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// taxi zones list by filter
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// payload body object
            /// </param>
            public static object TaxiZonesByFilter(this IRestClassLibraryClient operations, TaxiFilter body = default(TaxiFilter))
            {
                return Task.Factory.StartNew(s => ((IRestClassLibraryClient)s).TaxiZonesByFilterAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// taxi zones list by filter
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// payload body object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TaxiZonesByFilterAsync(this IRestClassLibraryClient operations, TaxiFilter body = default(TaxiFilter), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TaxiZonesByFilterWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// trips search return raw db objecs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// payload body object
            /// </param>
            public static object GetDataTrip(this IRestClassLibraryClient operations, TripFilter body = default(TripFilter))
            {
                return Task.Factory.StartNew(s => ((IRestClassLibraryClient)s).GetDataTripAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// trips search return raw db objecs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// payload body object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDataTripAsync(this IRestClassLibraryClient operations, TripFilter body = default(TripFilter), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataTripWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// trips search with a flat object results list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// payload body object
            /// </param>
            public static object GetTripDataResults(this IRestClassLibraryClient operations, TripFilter body = default(TripFilter))
            {
                return Task.Factory.StartNew(s => ((IRestClassLibraryClient)s).GetTripDataResultsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// trips search with a flat object results list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// payload body object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTripDataResultsAsync(this IRestClassLibraryClient operations, TripFilter body = default(TripFilter), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTripDataResultsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
